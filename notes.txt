Table layout:
User:
  api_key
  player_id
  faction_id

Player: static attributes
  name
  signup
  torn_id
  
Faction:
  torn_id
  api_key

BattleStatsUpdate:
  stats and modifiers
  player_id

PersonalStatsUpdate:
  stats that can change; these updates should be relatively infrequent
  player_id

Plan of action: TDD!!!!
Write api querier; get api key submission, battle stats updates, and attack updates first. Personal stats last.
Test using an http request mocking library of some kind.
Interface with these api-facing functions by POROs with well-defined responsibilities. Eg. A Registrar class is responsible for registering new users. There should be a set of classes responsible for validating and parsing responses.
